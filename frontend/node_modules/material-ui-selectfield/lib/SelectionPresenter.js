'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _div;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _arrowDropDown = require('material-ui/svg-icons/navigation/arrow-drop-down');

var _arrowDropDown2 = _interopRequireDefault(_arrowDropDown);

var _FloatingLabel = require('./FloatingLabel');

var _FloatingLabel2 = _interopRequireDefault(_FloatingLabel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var objectShape = _propTypes2.default.shape({
  value: _propTypes2.default.any.isRequired,
  label: _propTypes2.default.string
});

var styles = {
  div1: (_div = {
    position: 'relative',
    display: '-webkit-box'
  }, _div['display'] = '-webkit-flex', _div['display'] = '-moz-box', _div['display'] = '-ms-flexbox', _div['display'] = '-o-flex', _div['display'] = 'flex', _div.WebkitBoxPack = 'end', _div.WebkitJustifyContent = 'flex-end', _div.msFlexPack = 'end', _div.OJustifyContent = 'flex-end', _div.justifyContent = 'flex-end', _div.WebkitAlignItems = 'center', _div.MozAlignItems = 'center', _div.msAlignItems = 'center', _div.OAlignItems = 'center', _div.alignItems = 'center', _div),
  div2: {
    WebkitBoxFlex: 1,
    MozBoxFlex: 1,
    WebkitFlex: 1,
    msFlex: 1,
    OFlex: 1,
    flex: 1
  }
};

var SelectionsPresenter = function SelectionsPresenter(_ref) {
  var selectedValues = _ref.selectedValues,
      selectionsRenderer = _ref.selectionsRenderer,
      floatingLabel = _ref.floatingLabel,
      hintText = _ref.hintText,
      muiTheme = _ref.muiTheme,
      floatingLabelStyle = _ref.floatingLabelStyle,
      floatingLabelFocusStyle = _ref.floatingLabelFocusStyle,
      underlineStyle = _ref.underlineStyle,
      underlineFocusStyle = _ref.underlineFocusStyle,
      isFocused = _ref.isFocused,
      isOpen = _ref.isOpen,
      disabled = _ref.disabled,
      errorText = _ref.errorText;
  var _muiTheme$textField = muiTheme.textField,
      floatingLabelColor = _muiTheme$textField.floatingLabelColor,
      borderColor = _muiTheme$textField.borderColor,
      focusColor = _muiTheme$textField.focusColor;

  // Condition for animating floating Label color and underline

  var focusCondition = isFocused || isOpen;
  // Condition for shrinking the floating Label
  var shrinkCondition = Array.isArray(selectedValues) && !!selectedValues.length || !Array.isArray(selectedValues) && (typeof selectedValues === 'undefined' ? 'undefined' : _typeof(selectedValues)) === 'object' && selectedValues != null || focusCondition;

  var errorStyle = { borderColor: 'rgb(244,67,54)', borderWidth: 2 };
  var disabledStyle = { borderBottom: '2px dotted' };

  var baseHRstyle = _extends({
    position: 'absolute',
    bottom: 0,
    left: 0,
    width: '100%',
    margin: 0,
    boxSizing: 'content-box',
    borderTop: 'none',
    borderLeft: 'none',
    borderRight: 'none',
    borderBottom: '1px solid',
    borderColor: borderColor
  }, underlineStyle);

  var focusedHRstyle = disabled ? disabledStyle : errorText ? errorStyle : _extends({
    borderBottom: '2px solid',
    borderColor: focusCondition ? focusColor : borderColor,
    transition: '450ms cubic-bezier(0.23, 1, 0.32, 1)', // transitions.easeOut(),
    transform: 'scaleX( ' + (focusCondition ? 1 : 0) + ' )'
  }, underlineFocusStyle);

  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
      'div',
      { style: styles.div1 },
      _react2.default.createElement(
        'div',
        { style: styles.div2 },
        floatingLabel && _react2.default.createElement(
          _FloatingLabel2.default,
          {
            shrink: shrinkCondition || hintText,
            focusCondition: focusCondition,
            disabled: disabled,
            defaultColors: { floatingLabelColor: floatingLabelColor, focusColor: focusColor },
            floatingLabelStyle: _extends({}, floatingLabelStyle, { pointerEvents: 'none' }),
            floatingLabelFocusStyle: floatingLabelFocusStyle },
          floatingLabel
        ),
        (shrinkCondition || !floatingLabel || hintText) && selectionsRenderer(selectedValues, hintText, floatingLabelColor)
      ),
      _react2.default.createElement(_arrowDropDown2.default, { style: { fill: borderColor } }),
      !(focusCondition || errorText || disabled) && _react2.default.createElement('hr', { style: baseHRstyle }),
      _react2.default.createElement('hr', { style: _extends({}, baseHRstyle, focusedHRstyle) })
    ),
    errorText && _react2.default.createElement(
      'div',
      { style: { paddingTop: 5, fontSize: 12, color: 'rgb(244,67,54)' } },
      errorText
    )
  );
};

SelectionsPresenter.propTypes = process.env.NODE_ENV !== "production" ? {
  value: _propTypes2.default.oneOfType([objectShape, _propTypes2.default.arrayOf(objectShape)]),
  selectionsRenderer: _propTypes2.default.func,
  hintText: _propTypes2.default.string
} : {};

SelectionsPresenter.defaultProps = {
  value: null,
  selectionsRenderer: function selectionsRenderer(values, hintText, hintColor) {
    var hintDiv = _react2.default.createElement(
      'div',
      { style: { color: hintColor } },
      hintText
    );
    if (!values) return hintDiv;
    var value = values.value,
        label = values.label;

    if (Array.isArray(values)) {
      return values.length ? values.map(function (_ref2) {
        var value = _ref2.value,
            label = _ref2.label;
        return label || value;
      }).join(', ') : hintDiv;
    } else if (label || value) return label || value;else return hintDiv;
  }
};

exports.default = SelectionsPresenter;
module.exports = exports['default'];